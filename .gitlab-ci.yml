default:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://gl.wallarm.com
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/common:v0.5.0
  tags: [node-c05r1-stable-amd]

stages:
  - build
  - test
  - publish

variables:
  VAULT_SERVER_URL: https://vault-common.i.gcp.wallarm.space
  VAULT_AUTH_ROLE: gitlab-ci_node-team_wallarm-node
  VAULT_AUTH_PATH: jwt-gitlab
  RUNNER_K8S_IMAGE: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/tests-k8s:v0.5.0
  X_CI_BUILD_KIND:
    description: "What we want to run, usually 'develop' flow"
    value: 'develop'
    options:
      - 'develop'
      - 'production-local'
      - 'chart'
  ARCH:
    description: default architecture (mandatory var in test scripts)
    value: amd64
  WALLARM_API_PRESET:
    description: "Wallarm api preset"
    value: eu1
    options:
      - audit
      - eu1
      - us1

  ### For doc purposes only ###
  ## Variables used implicitly, only in upstream-triggered pipelines (KINDs production|release-candidate)
  # AIO_VERSION:
  #   description: AIO version to extract the nginx module from, and is also used as appVersion in chart; do not confuse with TAG, which in dynamically calculated


workflow:
  rules:
    - if: $AIO_VERSION =~ /^([0-9]+.[0-9]+.[0-9]+-rc).*$/
      variables:
        HELM_ARGS: --set config.sidecar.image.tag=$AIO_VERSION --set helper.image.tag=$AIO_VERSION # only override tag here, registry in use is still PUBLIC (chart default)
        CHART_TYPE: "release-candidate"
    - if: $AIO_VERSION
      variables:
        HELM_ARGS: --set config.sidecar.image.tag=$AIO_VERSION --set helper.image.tag=$AIO_VERSION # only override tag here, registry in use is still PUBLIC (chart default)
        CHART_TYPE: "release"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH =~ /^stable\/.*$/
      changes:
        - TAG
      variables:
        X_CI_BUILD_KIND: "production-local"
        REGISTRY: docker.io/wallarm
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^stable\/.*$/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      variables:
        X_CI_BUILD_KIND: "develop"
        REGISTRY: $CI_REGISTRY_IMAGE
        TAG: $CI_COMMIT_SHORT_SHA
    - if: $CI_COMMIT_TAG =~ /^helm-chart-[0-9]+.[0-9]+.[0-9]+$/
      variables:
        X_CI_BUILD_KIND: "chart"
        CHART_TYPE: "release"
    - if: $CI_COMMIT_TAG =~ /^(helm-chart-[0-9]+.[0-9]+.[0-9]+-rc).*$/
      variables:
        X_CI_BUILD_KIND: "chart"
        CHART_TYPE: "release-candidate"
    - if: $CI_PIPELINE_SOURCE == "web"


.x-docker-login-private: &x_docker_login_private
  - | # GitLab Container Registry
    docker login "${CI_REGISTRY}" \
        -u "${CI_REGISTRY_USER}" \
        -p "${CI_REGISTRY_PASSWORD}"
  - | # GitLab Dependency Proxy
    docker login "${CI_DEPENDENCY_PROXY_SERVER}" \
        -u "${CI_DEPENDENCY_PROXY_USER}" \
        -p "${CI_DEPENDENCY_PROXY_PASSWORD}"

.x-docker-login-public: &x_docker_login_public
  - | # DockerHub
    docker login \
        -u "${X_CREDS_DOCKERHUB_WALLARMCICD_USER}" \
        -p "${X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD}"


.before-build:
  before_script:
    - *x_docker_login_private
    - *x_docker_login_public

.before-test:
  before_script:
    - *x_docker_login_private
  variables:
    CLIENT_ID: $CLIENT_ID_${WALLARM_API_PRESET} # because fetching as vault secret leads to masking all id-like numbers in logs
  secrets:
    WALLARM_API_HOST: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/api_host@node-team", file: false}
    WALLARM_API_TOKEN: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/user_token@node-team", file: false}

    USER_TOKEN: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/user_token@node-team", file: false}
    USER_UUID: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/user_uuid@node-team", file: false}

    ALLURE_TOKEN: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/allure_server_token@node-team", file: false}
    WEBHOOK_UUID: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/webhook_uuid@node-team", file: false}
    WEBHOOK_API_KEY: {vault: "pipelines/common/smoke-test/${WALLARM_API_PRESET}/webhook_api_key@node-team", file: false}

.before-sign-docker:
  before_script:
    - *x_docker_login_public

BUILD:
  stage: build
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/docker:v0.5.0
  tags: [node-c2r4-stable-dind-amd]
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production-local)$/
  extends:
    - .before-build
  script: |
    echo "Calculated node version: ${TAG}"
    echo "Building for registry: $REGISTRY"

    make build

SMOKE:
  stage: test
  image: $RUNNER_K8S_IMAGE
  tags: [$RUNNER]
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production|release-candidate)$/
  parallel:
    matrix:
      - ARCH: amd64
        INJECTION_STRATEGY: [single, split]
        K8S: [v1.19, v1.29] # min and max supported versions, check actual in https://docs.wallarm.com/installation/kubernetes/sidecar-proxy/deployment/
        RUNNER: node-c4r8-stable-dind-amd
      - ARCH: arm64
        INJECTION_STRATEGY: [single, split]
        RUNNER: node-c4r8-stable-dind-arm
        K8S: [v1.19, v1.29] # min and max supported versions, check actual in https://docs.wallarm.com/installation/kubernetes/sidecar-proxy/deployment/
  extends:
    - .before-test
  variables:
    SKIP_CLUSTER_CREATION: true
    SKIP_IMAGE_CREATION: true
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
    SMOKE_REGISTRY_TOKEN: $X_CREDS_GITLAB_READONLY_USER
    SMOKE_REGISTRY_SECRET: $X_CREDS_GITLAB_READONLY_PASSWORD
    ALLURE_UPLOAD_REPORT: true
    ALLURE_GENERATE_REPORT: true
    ALLURE_ENVIRONMENT_ARCH: $ARCH
  script:
    - |
      export KINDEST_NODE_IMAGE=kindest/node:$(curl -s "https://registry.hub.docker.com/v2/repositories/kindest/node/tags?page_size=1000" \
      | jq -r --arg k "${K8S}." '.results[].name | select(startswith($k))' | sort -V | tail -n 1)
    - kind --version
    - |
      export KIND_CLUSTER_NAME=kind-$K8S
      export KUBECONFIG=$HOME/.kube/kind-config-$K8S
      export ALLURE_ENVIRONMENT_K8S=$K8S
    - |
      if [ -z "$TAG" ]; then
        export TAG="$(cat TAG)"
        export REGISTRY=docker.io/wallarm
      fi
    - docker pull -q ${REGISTRY}/sidecar-controller:${TAG}
    - kind create cluster --image=$KINDEST_NODE_IMAGE
    - make kind-smoke-test

LINT:
  stage: test
  image: $RUNNER_K8S_IMAGE
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production|release-candidate)$/
  script: |
    helm version
    helm lint helm/. --debug

VALIDATE:
  stage: test
  image: $RUNNER_K8S_IMAGE
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production|release-candidate)$/
  parallel:
    matrix:
      - K8S: [1.19.16, 1.20.15, 1.21.14, 1.22.17, 1.23.17, 1.24.17, 1.25.16, 1.26.15, 1.27.13, 1.28.9, 1.29.4]
  script: |
    helm template helm/. > result-$K8S.yaml --kube-version $K8S --debug
    kubeval -d result-$K8S.yaml --kubernetes-version $K8S --ignore-missing-schemas=false -o stdout --strict=true --openshift=false

INSTALLATION:
  stage: test
  image: $RUNNER_K8S_IMAGE
  tags: [node-c2r4-stable-dind-amd]
  extends:
    - .before-test
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production|release-candidate)$/
  parallel:
    matrix:
      - K8S: [1.19.16, 1.20.15, 1.21.14, 1.22.17, 1.23.17, 1.24.17, 1.25.16, 1.26.15, 1.27.13, 1.28.9, 1.29.4]
  variables:
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
  script: |
    [ -z "$TAG" ] && export TAG=$(cat TAG) && export REGISTRY=docker.io/wallarm
    kind create cluster \
      --config ${CI_PROJECT_DIR}/helm/test/kind/kind.yaml \
      --image kindest/node:v$K8S \
      --name kind \
      --wait 240s
    kubectl cluster-info
    kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
    echo "current-context:" $(kubectl config current-context)

    docker pull -q ${REGISTRY}/sidecar-controller:${TAG}
    kind load docker-image ${REGISTRY}/sidecar-controller:${TAG}

    unset KUBERNETES_SERVICE_HOST
    echo "[test-env] creating secret docker-registry ..."
    kubectl create secret docker-registry dockerhub-secret \
      --docker-server="https://index.docker.io/v1/" \
      --docker-username="${DOCKERHUB_USER}" \
      --docker-password="${DOCKERHUB_PASSWORD}" \
      --docker-email=docker-pull@unexists.unexists
    helm install wallarm-sidecar ./helm -f helm/values.test.yaml ${HELM_ARGS:-} \
      --set config.wallarm.api.host=${WALLARM_API_HOST} \
      --set config.wallarm.api.token=${WALLARM_API_TOKEN} \
      --set controller.image.fullname=${REGISTRY}/sidecar-controller:${TAG} \
      --debug \
      --timeout 5m0s \
      --wait
    sleep 5
    kubectl wait --for=condition=Ready pods --all --timeout=5m0s || (
    kubectl describe pod -l app.kubernetes.io/component=postanalytics &&
    kubectl describe pod -l app.kubernetes.io/component=controller &&
    kubectl get pods -A &&
    kubectl get secrets -A &&
    kubectl get jobs -A && exit 1)

    kubectl create namespace pytest
    kubectl -n pytest create secret docker-registry dockerhub-secret \
      --docker-server="https://index.docker.io/v1/" \
      --docker-username="${DOCKERHUB_USER}" \
      --docker-password="${DOCKERHUB_PASSWORD}" \
      --docker-email=docker-pull@unexists.unexists
    kubectl apply -f kind/docker/manifests/init/pytest.yaml
    while [[ -z $(kubectl -n pytest get pods -o name) ]]; do
      sleep 1
    done
    kubectl -n pytest wait pods --all --for=condition=Ready --timeout=60s

    POD_NAME=$(kubectl get pods -n pytest -o name | cut -d '/' -f 2)
    kubectl -n pytest exec -t ${POD_NAME} -- pytest -n 6 helm/test

CHART:
  stage: test
  image: $RUNNER_K8S_IMAGE
  tags: [node-c2r4-stable-dind-amd]
  extends:
    - .before-test
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production|release-candidate)$/
  variables:
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
    K8S: 1.28.7
  script: |
    [ -z "$TAG" ] && export TAG=$(cat TAG) && export REGISTRY=docker.io/wallarm
    docker pull -q ${REGISTRY}/sidecar-controller:${TAG}

    kind create cluster --image kindest/node:v$K8S
    kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
    kind get kubeconfig > $HOME/.kube/kind-config-$KIND_CLUSTER_NAME
    export CT_CONFIG="${CI_PROJECT_DIR}/kind-config-ct-${KIND_CLUSTER_NAME}"

    make ct-install



SIGN_DOCKER:
  stage: publish
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/docker:v0.5.0
  needs: [BUILD]
  rules:
    - if: $X_CI_BUILD_KIND == "production-local"
  extends:
    - .before-sign-docker
  secrets:
    COSIGN_PASSWORD: {vault: "pipelines/cosign/password@node-team", file: false}
    COSIGN_PRIVATE: {vault: "pipelines/cosign/private_key@node-team", file: false}
  variables:
    IMAGE: sidecar-controller
  script:
    - make sign
  artifacts:
    expire_in: 30 days
    paths:
      - $CI_PROJECT_DIR/*.json

HELM_PUBLISH:
  stage: publish
  image: $RUNNER_K8S_IMAGE
  rules:
   - if: $X_CI_BUILD_KIND =~ /^(chart|production|release-candidate)$/
  secrets:
    GITHUB_TOKEN: {vault: "pipelines/common/github_token/token@node-team", file: false}
  variables:
    GITHUB_REPOSITORY: wallarm/helm-charts
    CHARTS_DIR: .
    CHARTS_URL: https://charts.wallarm.com
    LINTING: off
    BRANCH: main
    TARGET_DIR: wallarm-sidecar
    INDEX_DIR: .
  # Git tags start with prefix and we crop it to get the chart version
  script: |
    if [[ $X_CI_BUILD_KIND == "chart" ]]; then
      echo "Classic(tag) chart publishing flow..."

      CHART_VERSION=$(echo $CI_COMMIT_TAG | cut -d '-' -f 3,4)
      export CHART_VERSION
      echo "CHART_VERSION=$CHART_VERSION" >> chart.env
    else
      echo "Upstream-based chart publishing flow..."
      .gitlab/calculate-version.sh && source version.env
      yq e -i '.appVersion = "'$AIO_VERSION'"' helm/Chart.yaml
      sed -E -i "s|(wallarm/sidecar):.*|\1:$AIO_VERSION|" helm/Chart.yaml
      sed -E -i "s|(wallarm/node-helpers):.*|\1:$AIO_VERSION|" helm/Chart.yaml
      yq e -i '.config.sidecar.image.tag = "'$AIO_VERSION'"' helm/values.yaml
      yq e -i '.helper.image.tag = "'$AIO_VERSION'"' helm/values.yaml
    fi
    export CHART_VERSION
    echo "CHART_VERSION=$CHART_VERSION" >> chart.env

    echo "Publishing Helm chart version: $CHART_VERSION"

    .gitlab/chart-publish.sh
  artifacts:
    reports:
      dotenv: chart.env

UPDATE_VERSION:
  stage: publish
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/gitlab:v0.5.0
  needs: [HELM_PUBLISH]
  rules:
    - if: $CHART_TYPE == "release"
  secrets:
    GITLAB_TOKEN: {vault: "pipelines/gl_version_repo_creds/token_secret@node-team", file: false}
    GITLAB_TOKEN_NAME: {vault: "pipelines/gl_version_repo_creds/token_name@node-team", file: false}
    GITLAB_HOST: {vault: "pipelines/gl_version_repo_creds/host@node-team", file: false}
    GITLAB_REPO: {vault: "pipelines/gl_version_repo_creds/repo@node-team", file: false}
  variables:
    COMPONENT_NAME: wallarm-sidecar-proxy
    COMPONENT_VERSION: $CHART_VERSION
  script: |
    .gitlab/update-version.sh
