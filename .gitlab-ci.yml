default:
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/wallarm-node/node-gitlab-runner/common-runner:v0.3.2
  tags: [infra-c05r1-amd]

stages:
  - build
  - test
  - publish

variables:
  X_CI_BUILD_KIND:
    description: "What we want to run, usually 'develop' flow"
    value: 'develop'
    options:
      - 'develop'
      - 'production'
      - 'chart'
  ARCH:
    description: default architecture (mandatory var in test scripts)
    value: amd64
  WALLARM_API_PRESET:
    description: "Wallarm api preset"
    value: eu1
    options:
      - audit
      - eu1
      - us1


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH =~ /^stable\/.*$/
      changes:
        - TAG
      variables:
        X_CI_BUILD_KIND: "production"
        REGISTRY: docker.io/wallarm
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^stable\/.*$/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      variables:
        X_CI_BUILD_KIND: "develop"
        REGISTRY: $CI_REGISTRY_IMAGE
        TAG: $CI_COMMIT_SHORT_SHA
    - if: $CI_COMMIT_TAG =~ /^helm-chart-[0-9]+.[0-9]+.[0-9]+$/
      variables:
        X_CI_BUILD_KIND: "chart"
        CHART_TYPE: "release"
    - if: $CI_COMMIT_TAG =~ /^(helm-chart-[0-9]+.[0-9]+.[0-9]+-rc).*$/
      variables:
        X_CI_BUILD_KIND: "chart"
        CHART_TYPE: "release-candidate"
    - if: $CI_PIPELINE_SOURCE == "web"


.x-vault-login: &x_vault_login
  - | # login to (new) vault-common.i.gcp.wallarm.space
    [ "$ARCH" = "arm64" ] && VAULT_PATH=kubernetes-infra-ci || VAULT_PATH=kubernetes
    export VAULT_ADDR=https://vault-common.i.gcp.wallarm.space
    vault write -field=token \
        "auth/${VAULT_PATH}/login" \
        role=gitlab-runner \
        jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > ${HOME}/.vault-token
    chmod 600 ~/.vault-token

.x-docker-login-private: &x_docker_login_private
  - | # GitLab Container Registry
    docker login "${CI_REGISTRY}" \
        -u "${CI_REGISTRY_USER}" \
        -p "${CI_REGISTRY_PASSWORD}"
  - | # GitLab Dependency Proxy
    docker login "${CI_DEPENDENCY_PROXY_SERVER}" \
        -u "${CI_DEPENDENCY_PROXY_USER}" \
        -p "${CI_DEPENDENCY_PROXY_PASSWORD}"

.x-docker-login-public: &x_docker_login_public
  - | # DockerHub
    docker login \
        -u "${X_CREDS_DOCKERHUB_WALLARMCICD_USER}" \
        -p "${X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD}"

.x-get-node-credentials: &x_get_node_credentials |-
    export WALLARM_API_HOST=$(vault kv get -field=api_host -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export WALLARM_API_TOKEN=$(vault kv get -field=user_token -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export CLIENT_ID=$(vault kv get -field=client_id -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export USER_TOKEN=$(vault kv get -field=user_token -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export USER_UUID=$(vault kv get -field=user_uuid -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")

    export ALLURE_PROJECT_ID=$(vault kv get -field=allure_project_id -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export ALLURE_TOKEN=$(vault kv get -field=allure_server_token -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export ALLURE_ENDPOINT=$(vault kv get -field=allure_server_url -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export WEBHOOK_UUID=$(vault kv get -field=webhook_uuid -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")
    export WEBHOOK_API_KEY=$(vault kv get -field=webhook_api_key -mount="node-team" "pipelines/common/smoke-test/${WALLARM_API_PRESET}")

.x-sign-images: &x_sign_images
  - |
    export COSIGN_PASSWORD=$(vault kv get -field=password -mount="node-team" pipelines/cosign)
    export COSIGN_PRIVATE=$(vault kv get -field=private_key -mount="node-team" pipelines/cosign)

.x-get-github-token: &x_get_github_token
  - |
    export GITHUB_TOKEN=$(vault kv get -field=token -mount="node-team" "pipelines/common/github_token")

.x-get-gitlab-credentials: &x_get_gitlab_credentials
  - |
    export GITLAB_TOKEN=$(vault kv get -field=token_secret -mount="node-team" pipelines/gl_version_repo_creds)
    export GITLAB_TOKEN_NAME=$(vault kv get -field=token_name -mount="node-team" pipelines/gl_version_repo_creds)
    export GITLAB_HOST=$(vault kv get -field=host -mount="node-team" pipelines/gl_version_repo_creds)
    export GITLAB_REPO=$(vault kv get -field=repo -mount="node-team" pipelines/gl_version_repo_creds)

.before-build:
  before_script:
    - *x_docker_login_private
    - *x_docker_login_public

.before-test:
  before_script:
    - *x_docker_login_private
    - *x_vault_login
    - *x_get_node_credentials

.before-sign-docker:
  before_script:
    - *x_vault_login
    - *x_docker_login_public
    - *x_sign_images

.before-helm-publish:
  before_script:
    - *x_vault_login
    - *x_get_github_token

.before-update-versions:
  before_script:
    - *x_vault_login
    - *x_get_gitlab_credentials



BUILD:
  stage: build
  tags: [infra-c2r4-dind-amd]
  rules:
    - if: $X_CI_BUILD_KIND =~ /^(develop|production)$/
  extends:
    - .before-build
  script: |
    echo "Calculated node version: ${TAG}"
    echo "Building for registry: $REGISTRY"

    make build

SMOKE:
  stage: test
  needs: [BUILD]
  tags: [$RUNNER]
  rules:
    - if: $X_CI_BUILD_KIND == "develop"
  parallel:
    matrix:
      - ARCH: amd64
        INJECTION_STRATEGY: [single, split]
        RUNNER: infra-c2r4-dind-amd
        K8S: [1.28.7]
      - ARCH: arm64
        INJECTION_STRATEGY: [single, split]
        RUNNER: infra-c2r4-dind-arm
        K8S: [1.28.7]
  extends:
    - .before-test
  variables:
    KIND_CLUSTER_NAME: kind-$K8S
    KUBECONFIG: $HOME/.kube/kind-config-$K8S
    SKIP_CLUSTER_CREATION: true
    SKIP_IMAGE_CREATION: true
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
    SMOKE_REGISTRY_TOKEN: $X_CREDS_GITLAB_READONLY_USER
    SMOKE_REGISTRY_SECRET: $X_CREDS_GITLAB_READONLY_PASSWORD
    ALLURE_UPLOAD_REPORT: true
    ALLURE_GENERATE_REPORT: true
    ALLURE_ENVIRONMENT_K8S: $K8S
    ALLURE_ENVIRONMENT_ARCH: $ARCH
  script: |
    docker pull ${REGISTRY}/sidecar-controller:${TAG}

    kind create cluster --image=kindest/node:v$K8S
    make kind-smoke-test

LINT:
  stage: test
  rules:
    - if: $X_CI_BUILD_KIND == "develop"
  script: |
    helm version
    helm lint helm/. --debug

VALIDATE:
  stage: test
  rules:
    - if: $X_CI_BUILD_KIND == "develop"
  parallel:
    matrix:
      - K8S: [1.19.16, 1.20.15, 1.21.14, 1.22.17, 1.23.17, 1.24.17, 1.25.16, 1.26.15, 1.27.13, 1.28.9, 1.29.4]
  variables:
    KUBEVAL_SCHEMA_LOCATION: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/
  script: |
    curl -Lo kubeval.tgz https://github.com/instrumenta/kubeval/releases/download/v0.16.1/kubeval-linux-amd64.tar.gz && tar xf kubeval.tgz && chmod +x ./kubeval

    helm template helm/. > result-$K8S.yaml --kube-version $K8S --debug

    ./kubeval -d result-$K8S.yaml --kubernetes-version $K8S --ignore-missing-schemas=false -o stdout --strict=true --openshift=false

INSTALLATION:
  stage: test
  tags: [infra-c2r4-dind-amd]
  extends:
    - .before-test
  rules:
    - if: $X_CI_BUILD_KIND == "develop"
  parallel:
    matrix:
      - K8S: [1.19.16, 1.20.15, 1.21.14, 1.22.17, 1.23.17, 1.24.17, 1.25.16, 1.26.15, 1.27.13, 1.28.9, 1.29.4]
  variables:
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
  script: |
    kind create cluster \
      --config ${CI_PROJECT_DIR}/helm/test/kind/kind.yaml \
      --image kindest/node:v$K8S \
      --name kind \
      --wait 240s
    kubectl cluster-info
    kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
    echo "current-context:" $(kubectl config current-context)

    docker pull ${REGISTRY}/sidecar-controller:${TAG}
    kind load docker-image ${REGISTRY}/sidecar-controller:${TAG}

    unset KUBERNETES_SERVICE_HOST
    echo "[test-env] creating secret docker-registry ..."
    kubectl create secret docker-registry dockerhub-secret \
      --docker-server="https://index.docker.io/v1/" \
      --docker-username="${DOCKERHUB_USER}" \
      --docker-password="${DOCKERHUB_PASSWORD}" \
      --docker-email=docker-pull@unexists.unexists
    helm install wallarm-sidecar ./helm -f helm/values.test.yaml \
      --set config.wallarm.api.host=${WALLARM_API_HOST} \
      --set config.wallarm.api.token=${WALLARM_API_TOKEN} \
      --set controller.image.fullname=${REGISTRY}/sidecar-controller:${TAG} \
      --debug \
      --timeout 5m0s \
      --wait
    sleep 5
    kubectl wait --for=condition=Ready pods --all --timeout=5m0s || (
    kubectl describe pod -l app.kubernetes.io/component=postanalytics &&
    kubectl describe pod -l app.kubernetes.io/component=controller &&
    kubectl get pods -A &&
    kubectl get secrets -A &&
    kubectl get jobs -A && exit 1)

    kubectl create namespace pytest
    kubectl -n pytest create secret docker-registry dockerhub-secret \
      --docker-server="https://index.docker.io/v1/" \
      --docker-username="${DOCKERHUB_USER}" \
      --docker-password="${DOCKERHUB_PASSWORD}" \
      --docker-email=docker-pull@unexists.unexists
    kubectl apply -f kind/docker/manifests/init/pytest.yaml
    while [[ -z $(kubectl -n pytest get pods -o name) ]]; do
      sleep 1
    done
    kubectl -n pytest wait pods --all --for=condition=Ready --timeout=60s

    POD_NAME=$(kubectl get pods -n pytest -o name | cut -d '/' -f 2)
    kubectl -n pytest exec -t ${POD_NAME} -- pytest -n 6 helm/test

CHART:
  stage: test
  tags: [infra-c2r4-dind-amd]
  extends:
    - .before-test
  rules:
    - if: $X_CI_BUILD_KIND == "develop"
  variables:
    DOCKERHUB_USER: $X_CREDS_DOCKERHUB_WALLARMCICD_USER
    DOCKERHUB_PASSWORD: $X_CREDS_DOCKERHUB_WALLARMCICD_PASSWORD
    K8S: 1.28.7
  script: |
    docker pull ${REGISTRY}/sidecar-controller:${TAG}

    kind create cluster --image kindest/node:v$K8S
    kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
    kind get kubeconfig > $HOME/.kube/kind-config-$KIND_CLUSTER_NAME
    export CT_CONFIG="${CI_PROJECT_DIR}/kind-config-ct-${KIND_CLUSTER_NAME}"

    make ct-install



SIGN_DOCKER:
  stage: publish
  tags: [infra-c1r2-dind-amd]
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/devops/docker/gitlab-runner/gitlab-runner:v1.11.6
  needs: [BUILD]
  rules:
    - if: $X_CI_BUILD_KIND == "production"
  extends:
    - .before-sign-docker
  variables:
    IMAGE: sidecar-controller
  script:
    - make sign
  artifacts:
    expire_in: 30 days
    paths:
      - $CI_PROJECT_DIR/*.json

HELM_PUBLISH:
  stage: publish
  rules:
   - if: $X_CI_BUILD_KIND == "chart"
  extends:
    - .before-helm-publish
  variables:
    GITHUB_REPOSITORY: wallarm/helm-charts
    CHARTS_DIR: .
    CHARTS_URL: https://charts.wallarm.com
    LINTING: off
    BRANCH: main
    TARGET_DIR: wallarm-sidecar
    INDEX_DIR: .
  # Git tags start with prefix and we crop it to get the chart version
  script: |
    CHART_VERSION=$(echo $CI_COMMIT_TAG | cut -d '-' -f 3,4)
    export CHART_VERSION
    echo "CHART_VERSION=$CHART_VERSION" >> chart.env

    echo "Chart type: $CHART_TYPE"
    echo "Publishing Helm chart version: $CHART_VERSION"

    .gitlab/chart-publish.sh
  artifacts:
    reports:
      dotenv: chart.env

UPDATE_VERSION:
  stage: publish
  image: europe-docker.pkg.dev/wallarm-infra/wallarm-cloud-europe/devops/docker/gitlab-runner/gitlab-runner:v1.11.6
  needs: [HELM_PUBLISH]
  rules:
    - if: $X_CI_BUILD_KIND == "chart" && $CHART_TYPE == "release"
  extends:
    - .before-update-versions
  variables:
    COMPONENT_NAME: wallarm-sidecar-proxy
    COMPONENT_VERSION: $CHART_VERSION
  script: |
    .gitlab/update-version.sh
