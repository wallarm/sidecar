name: Build new version

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  #TODO Replace it with 'wallarm/sidecar-controller' when Docker token will be available
  IMAGE: quay.io/dmitriev/sidecar-injector

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          make build TAG=${GITHUB_SHA} IMAGE=${IMAGE}
          mkdir artifacts
          docker save -o artifacts/docker-image.tar ${IMAGE}:${GITHUB_SHA}

      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: artifacts/docker-image.tar
          retention-days: 1

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          verbosity: "0"
          wait: "240s"
          config: helm/test/kind/kind.yaml
          node_image: kindest/node:v1.24.2
          cluster_name: kind

      - name: Wait for cluster readiness
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Load image
        run: kind load image-archive artifacts/docker-image.tar

        #TODO replace 'controller.image.fullname' with 'controller.image.tag=${GITHUB_SHA}' when switched to Wallarm registry
      - name: Install Helm chart
        run: |
          helm version
          helm install wallarm-sidecar ./helm -f helm/values.test.yaml \
            --set config.wallarm.api.token=${{ secrets.API_TOKEN }} \
            --set controller.image.fullname=${IMAGE}:${GITHUB_SHA} \
            --timeout 5m0s \
            --wait
          kubectl wait --for=condition=Ready pods --all --timeout=30s
          kubectl get all
          kubectl describe pod -l app.kubernetes.io/component=postanalytics
          kubectl describe pod -l app.kubernetes.io/component=controller

      - name: Run test
        run: |
          kubectl apply -f kind/docker/manifests/init/pytest.yaml
          kubectl -n pytest wait pods --all --for=condition=Ready
          POD_NAME=$(kubectl get pods -n pytest -o name | cut -d '/' -f 2) 
          kubectl -n pytest exec -t ${POD_NAME} -- pytest -n 4 helm/test

  push:
    name: Push
    needs: test
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.format_tag.outputs.tag }}
    steps:
      #TODO Should be updated with proper settings when Docker token will be available
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Restore artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts

      - name: Load image
        run: docker load -q -i artifacts/docker-image.tar

      - name: Format tag
        id: format_tag
        run: echo "::set-output name=tag::$(echo ${GITHUB_REF_NAME} | cut -d 'v' -f 2)"

      - name: Tag and push
        run: |
          docker tag ${IMAGE}:${GITHUB_SHA} ${IMAGE}:${{ steps.format_tag.outputs.tag }}
          docker push ${IMAGE}:${{ steps.format_tag.outputs.tag }}

  update_versions:
    name: Update versions
    needs: push
    uses: wallarm/sidecar/.github/workflows/update_versions.yaml@main
    with:
      controller_update: true
      controller_tag: ${{ needs.push.outputs.tag }}