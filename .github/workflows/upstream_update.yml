name: Upstream update handler

on:
  repository_dispatch:
    types: [upstream_update]

jobs:
  check:
    name: Payload sanity check
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.upstream_update || github.event.client_payload.sidecar_update }}
    steps:
      - name: Payload sanity check
        run: |
          if [ ${{ github.event.client_payload.upstream_update }} = true ]; then
            echo "Upstream update was requested"
            if [ -z ${{ github.event.client_payload.upstream_tag }} ]; then
              echo "Upstream tag is empty! It should be set in 'client_payload.upstream_tag' property. \nPayload sanity check failed! Exiting ..."
              exit 1
            else
              echo "OK"
            fi
          fi
      
          if [ ${{ github.event.client_payload.sidecar_update }} = true ]; then
            echo "Sidecar update was requested"
            if [ -z ${{ github.event.client_payload.sidecar_tag }} ]; then
              echo "Sidecar tag is empty! It should be set in 'client_payload.sidecar_tag' property. \nPayload sanity check failed! Exiting ..."
              exit 1
            else
              echo "OK"
            fi
          fi
      
          echo "Payload sanity check PASSED"

  test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Prepare Helm arguments
        run: |
          HELM_ARGS=""
          if [ ${{ github.event.client_payload.upstream_update }} = true ]; then
            UPSTREAM_TAG=${{ github.event.client_payload.upstream_tag }}
            HELM_ARGS+=" \
            --set postanalytics.addnode.image.tag=${UPSTREAM_TAG} \
            --set postanalytics.exportenv.image.tag=${UPSTREAM_TAG} \
            --set postanalytics.cron.image.tag=${UPSTREAM_TAG} \
            --set postanalytics.tarantool.image.tag=${UPSTREAM_TAG} \
            --set postanalytics.heartbeat.image.tag=${UPSTREAM_TAG} \
            --set postanalytics.appstructure.image.tag=${UPSTREAM_TAG}"
            echo "HELM_ARGS: ${HELM_ARGS}"
          fi
          
          if [ ${{ github.event.client_payload.sidecar_update }} = true ]; then
            SIDECAR_TAG=${{ github.event.client_payload.sidecar_tag }}
            HELM_ARGS+=" --set config.sidecar.image.tag=${SIDECAR_TAG}"
          fi
          
          echo "HELM_ARGS=${HELM_ARGS}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          verbosity: "0"
          wait: "240s"
          config: helm/test/kind/kind.yaml
          node_image: kindest/node:v1.24.1
          cluster_name: kind

      - name: Wait cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Install Helm chart
        run: |
          helm version
          helm install wallarm-sidecar helm/. -f helm/values.test.yaml ${HELM_ARGS} \
          --set config.wallarm.api.host=audit.api.wallarm.com \
          --set config.wallarm.api.token=${{ secrets.API_TOKEN }} \
          --namespace wallarm-sidecar \
          --create-namespace \
          --wait \
          --debug \
          --timeout 5m0s
          kubectl -n wallarm-sidecar wait --for=condition=Ready pods --all --timeout=30s
          kubectl -n wallarm-sidecar get all
          kubectl -n wallarm-sidecar describe pod -l app.kubernetes.io/component=controller
          kubectl -n wallarm-sidecar describe pod -l app.kubernetes.io/component=postanalytics

      - name: Run test
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pytest helm/test/integration_test.py

  update_versions:
    name: Update versions
    needs: test
    uses: wallarm/sidecar/.github/workflows/update_versions.yaml@main
    with:
      upstream_update: ${{ github.event.client_payload.upstream_update }}
      upstream_tag: ${{ github.event.client_payload.upstream_tag }}
      sidecar_update: ${{ github.event.client_payload.sidecar_update }}
      sidecar_tag: ${{ github.event.client_payload.sidecar_tag }}