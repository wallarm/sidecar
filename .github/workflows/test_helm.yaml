name: Test Helm

on:
  workflow_dispatch:
    inputs:
      run_lint:
        description: Run helm lint?
        type: boolean
        required: true
        default: true
      run_validate:
        description: Run validate manifests?
        type: boolean
        required: true
        default: true
      run_test:
        description: Run integration/E2E test
        type: boolean
        required: true
        default: true

  workflow_call:
    inputs:
      ref:
        type: string
        required: true
      run_lint:
        type: boolean
        required: true
      run_validate:
        type: boolean
        required: true
      run_test:
        type: boolean
        required: true
      helm_args:
        type: string
        required: false
      load_artifact:
        type: boolean
        required: false
    secrets:
      API_TOKEN:
        description: Wallarm API token
        required: false


jobs:
  check:
    name: Get git reference
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.get_git_ref.outputs.ref }}
    steps:
      - id: get_git_ref
        run: |
          if [ -n "${{ inputs.ref }}" ]; then
            echo "::set-output name=ref::${{ inputs.ref }}"
          else
            echo "::set-output name=ref::${{ github.ref_name }}"
          fi

  lint:
    name: Helm lint
    if: ${{ inputs.run_lint }}
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check.outputs.ref }}

      - name: Helm lint
        run: |
          helm version
          helm lint helm/. --debug

  validate:
    name: Validate manifests
    if: ${{ inputs.run_validate }}
    env:
      KUBEVAL_SCHEMA_LOCATION: 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/'
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubeVersion:
          - 1.19.16
          - 1.20.15
          - 1.21.14
          - 1.22.13
          - 1.23.9
          - 1.24.4
          - 1.25.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check.outputs.ref }}

      - name: Helm template
        run: helm template helm/. > result-${{ matrix.kubeVersion }}.yaml --kube-version ${{ matrix.kubeVersion }} --debug

      - name: Kubeval
        uses: instrumenta/kubeval-action@master
        with:
          files: result-${{ matrix.kubeVersion }}.yaml
          version: ${{ matrix.kubeVersion }}
          ignore_missing_schemas: false

  test:
    name: Integration test
    if: ${{ inputs.run_test }}
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubeVersion:
          - 1.19.16
          - 1.20.15
          - 1.21.14
          - 1.22.13
          - 1.23.10
          - 1.24.4
          - 1.25.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check.outputs.ref }}

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          verbosity: "0"
          wait: "240s"
          config: helm/test/kind/kind.yaml
          node_image: kindest/node:v${{ matrix.kubeVersion }}
          cluster_name: kind

      - name: Wait cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready pods --all --timeout=180s -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Restore artifact
        if: ${{ inputs.load_artifact }}
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts

      - name: Load image
        if: ${{ inputs.load_artifact }}
        run: kind load image-archive artifacts/docker-image.tar

      - name: Install Helm chart
        run: |
          set -x
          helm version
          helm install wallarm-sidecar ./helm -f helm/values.test.yaml \
            --set config.wallarm.api.token=${{ secrets.API_TOKEN }} \
            --debug \
            --timeout 5m0s \
            --wait ${{ inputs.helm_args }}
          kubectl wait --for=condition=Ready pods --all --timeout=5m0s
          kubectl describe pod -l app.kubernetes.io/component=postanalytics
          kubectl describe pod -l app.kubernetes.io/component=controller

      - name: Deploy pytest
        run: |
          kubectl apply -f kind/docker/manifests/init/pytest.yaml
          while [[ -z $(kubectl -n pytest get pods -o name) ]]; do
            sleep 1
          done
          kubectl -n pytest wait pods --all --for=condition=Ready

      - name: Run test
        run: |
          POD_NAME=$(kubectl get pods -n pytest -o name | cut -d '/' -f 2)
          kubectl -n pytest exec -t ${POD_NAME} -- pytest -n 4 helm/test
