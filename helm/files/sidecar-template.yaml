initContainers:
{{ if ((getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-iptables-enable" .Config.Deployment.iptablesEnable) | toBool) -}}
  {{ template "initIptablesContainer" . }}
{{- end }}
{{ if eq (getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-deployment-scheme" .Config.Deployment.scheme) "split" -}}
  {{ template "initHelperContainer" . }}
{{- end }}

containers:
{{ if eq (getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-deployment-scheme" .Config.Deployment.scheme) "split" -}}
  {{ template "helperContainer" . }}
{{- end }}
  {{ template "proxyContainer" . }}

volumes:
  - name: wallarm
    emptyDir: {}
  - name: wallarm-acl
    emptyDir: {}
  - name: wallarm-cache
    emptyDir: {}
{{ if (isSet .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-extra-volumes`) -}}
  {{ range $index, $value := fromJson (index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-extra-volumes`) }}
  - name: "{{ $index }}"
    {{ toYaml $value | indent 4 }}
  {{ end }}
{{- end }}


{{ define "proxyContainer" }}
- name: sidecar-proxy
  image: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/proxy-image" .Config.Container.proxy.image.image }}
  imagePullPolicy: {{ .Config.Container.proxy.image.pullPolicy }}
  {{ if eq (getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-deployment-scheme" .Config.Deployment.scheme) "split" -}}
  command: ["/usr/local/run-nginx.sh"]
  {{- else }}
  command: ["/usr/local/run-node.sh"]
  {{- end }}
  env:
    {{ if ne (getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-deployment-scheme" .Config.Deployment.scheme) "split" -}}
    {{ template "wallarmApiVariables" . }}
    {{ template "wallarmCronVariables" . }}
      #TODO Determine proper way to identify sidecar version
    - name: WALLARM_INGRESS_CONTROLLER_VERSION
      value: "{{ .Config.Wallarm.version }}"
    {{- end  }}
    {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/wallarm-application") -}}
    - name: WALLARM_APPLICATION
      value: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/wallarm-application` }}"
    {{- end  }}
    - name: WALLARM_MODE
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-mode` .Config.Wallarm.mode }}"
    - name: WALLARM_MODE_ALLOW_OVERRIDE
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-mode-allow-override` .Config.Wallarm.modeAllowOverride }}"
    - name: WALLARM_PARSE_RESPONSE
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-parse-response` .Config.Wallarm.parseResponse }}"
    - name: WALLARM_PARSE_WEBSOCKET
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-parse-websocket` .Config.Wallarm.parseWebsocket }}"
    - name: WALLARM_UNPACK_RESPONSE
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-unpack-response` .Config.Wallarm.unpackResponse }}"
    - name: WALLARM_TARANTOOL_HOST
      value: "{{ .Config.Wallarm.tarantool.host }}"
    - name: WALLARM_UPSTREAM_CONNECT_ATTEMPTS
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-upstream-connect-attempts` .Config.Wallarm.upstream.connectAttempts }}"
    - name: WALLARM_UPSTREAM_RECONNECT_INTERVAL
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/wallarm-upstream-reconnect-interval` .Config.Wallarm.upstream.reconnectInterval }}"
    - name: NGINX_LISTEN_PORT
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-listen-port` .Config.Nginx.listenPort }}"
    - name: NGINX_PROXY_PASS_PORT
      value: "{{ template `applicationPort` . }}"
    - name: NGINX_STATUS_PORT
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-status-port` .Config.Nginx.statusPort }}"
    - name: NGINX_STATUS_PATH
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-status-path` .Config.Nginx.statusPath }}"
    - name: NGINX_HEALTH_PATH
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-health-path` .Config.Nginx.healthPath }}"
    - name: NGINX_WALLARM_STATUS_PATH
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-wallarm-status-path` .Config.Nginx.wallarmStatusPath }}"
    - name: NGINX_WALLARM_METRICS_PORT
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-wallarm-metrics-port` .Config.Nginx.wallarmMetricsPort }}"
    - name: NGINX_WALLARM_METRICS_PATH
      value: "{{ getAnnotation .ObjectMeta `sidecar.wallarm.io/nginx-wallarm-metrics-path` .Config.Nginx.wallarmMetricsPath }}"
    {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-http-include") -}}
    - name: NGINX_HTTP_INCLUDE
      value: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/nginx-http-include` }}"
    {{- end }}
    {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-server-include") -}}
    - name: NGINX_SERVER_INCLUDE
      value: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/nginx-server-include` }}"
    {{- end }}
    {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-location-include") -}}
    - name: NGINX_LOCATION_INCLUDE
      value: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/nginx-location-include` }}"
    {{- end }}
    {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-extra-modules") -}}
    - name: NGINX_EXTRA_MODULES
      value: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/nginx-extra-modules` }}"
    {{- end }}
  ports:
    - name: status
      containerPort: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/nginx-status-port" .Config.Nginx.statusPort }}
      protocol: TCP
    - name: metrics
      containerPort: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/nginx-wallarm-metrics-port" .Config.Nginx.wallarmMetricsPort }}
      protocol: TCP
    {{ if not ((getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-iptables-enable" .Config.Deployment.iptablesEnable) | toBool) -}}
    - name: proxy
      containerPort: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/nginx-listen-port" .Config.Nginx.listenPort }}
      protocol: TCP
    {{- end }}
{{ if .Config.Container.proxy.livenessProbeEnable }}
  livenessProbe:
    httpGet:
      path: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/nginx-health-path" .Config.Nginx.healthPath }}
      port: status
    {{ if (index .Config.Container.proxy "livenessProbe") }}
    {{ toYaml .Config.Container.proxy.livenessProbe | indent 4 }}
    {{ end }}
{{ end }}
  volumeMounts:
    - mountPath: /etc/wallarm
      name: wallarm
    - mountPath: /var/lib/wallarm-acl
      name: wallarm-acl
    - mountPath: /var/lib/nginx/wallarm/
      name: wallarm-cache
    {{- if (isSet .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-extra-volume-mounts`) }}
    {{ range $index, $value := fromJson (index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-extra-volume-mounts`) }}
    - name: "{{ $index }}"
      {{ toYaml $value | indent 6 }}
    {{ end }}
    {{- end }}
  securityContext:
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
    runAsUser: 101
  resources:
{{ template "proxyContainer.resources" . }}
{{ end }}

{{ define "helperContainer" }}
- name: sidecar-helper
  image: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/proxy-image" .Config.Container.proxy.image.image }}
  imagePullPolicy: {{ .Config.Container.proxy.image.pullPolicy }}
  command: ["supervisord", "-c", "/etc/supervisor/supervisord.helper.conf"]
  env:
    {{ template "wallarmApiVariables" . }}
    {{ template "wallarmCronVariables" . }}
    - name: WALLARM_SYNCNODE_OWNER
      value: www-data
    - name: WALLARM_SYNCNODE_GROUP
      value: www-data
      #TODO Determine proper way to identify sidecar version
    - name: WALLARM_INGRESS_CONTROLLER_VERSION
      value: "{{ .Config.Wallarm.version }}"
  volumeMounts:
    - mountPath: /etc/wallarm
      name: wallarm
    - mountPath: /var/lib/wallarm-acl
      name: wallarm-acl
  securityContext:
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
    runAsUser: 101
  resources:
{{ template "helperContainer.resources" . }}
{{ end }}

{{ define "initHelperContainer" }}
- name: sidecar-init-helper
  image: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/proxy-image" .Config.Container.proxy.image.image }}
  imagePullPolicy: {{ .Config.Container.proxy.image.pullPolicy }}
  command: ["/usr/local/run-addnode.sh"]
  env:
    {{ template "wallarmApiVariables" . }}
    - name: WALLARM_SYNCNODE_OWNER
      value: www-data
    - name: WALLARM_SYNCNODE_GROUP
      value: www-data
      #TODO Determine proper way to identify sidecar version
    - name: WALLARM_INGRESS_CONTROLLER_VERSION
      value: "{{ .Config.Wallarm.version }}"
  volumeMounts:
    - mountPath: /etc/wallarm
      name: wallarm
    - mountPath: /var/lib/wallarm-acl
      name: wallarm-acl
  securityContext:
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
    runAsUser: 101
  resources:
{{ template "initHelperContainer.resources" . }}
{{ end }}

{{ define "initIptablesContainer" }}
- name: sidecar-init-iptables
  image: {{ getAnnotation .ObjectMeta "sidecar.wallarm.io/proxy-image" .Config.Container.proxy.image.image }}
  imagePullPolicy: {{ .Config.Container.proxy.image.pullPolicy }}
  env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: APP_PORT
      value: "{{ template `applicationPort` . }}"
    - name: NGINX_PORT
      value: "{{ getAnnotation .ObjectMeta "sidecar.wallarm.io/nginx-listen-port" .Config.Nginx.listenPort }}"
  command: ["iptables"]
  args: ["-t", "nat", "-A", "PREROUTING", "-p", "tcp", "-d", "$(POD_IP)", "--dport", "$(APP_PORT)", "-j", "REDIRECT", "--to-ports", "$(NGINX_PORT)"]
  securityContext:
    capabilities:
      add:
      - NET_ADMIN
      drop:
      - ALL
    privileged: true
  resources:
{{ template "initIptablesContainer.resources" . }}
{{ end }}

{{- define "applicationPort" }}
  {{- if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-proxy-pass-port") }}
    {{- index .ObjectMeta.Annotations "sidecar.wallarm.io/nginx-proxy-pass-port" }}
  {{- else }}
    {{- getAppPort .PodSpec .Config.Nginx.proxyPassPort }}
  {{- end }}
{{- end }}

{{- define "wallarmApiVariables" }}
    - name: WALLARM_API_HOST
      value: "{{ .Config.Api.host }}"
    - name: WALLARM_API_PORT
      value: "{{ .Config.Api.port }}"
    - name: WALLARM_API_TOKEN
      value: "{{ .Config.Api.token }}"
    - name: WALLARM_API_USE_SSL
      value: "{{ .Config.Api.useSSL }}"
    - name: WALLARM_API_CA_VERIFY
      value: "{{ .Config.Api.caVerify }}"
{{- end }}

{{- define "wallarmCronVariables" }}
    - name: WALLARM_CRON_EXPORT_ENV_SCHEDULE
      value: "{{ .Config.Wallarm.cronJobs.exportEnvironment.schedule }}"
    - name: WALLARM_CRON_EXPORT_ENV_TIMEOUT
      value: "{{ .Config.Wallarm.cronJobs.exportEnvironment.timeout }}"
    - name: WALLARM_CRON_EXPORT_METRICS_SCHEDULE
      value: "{{ .Config.Wallarm.cronJobs.exportMetrics.schedule }}"
    - name: WALLARM_CRON_EXPORT_METRICS_TIMEOUT
      value: "{{ .Config.Wallarm.cronJobs.exportMetrics.timeout }}"
    - name: WALLARM_CRON_SYNC_IP_LISTS_SCHEDULE
      value: "{{ .Config.Wallarm.cronJobs.syncIpLists.schedule }}"
    - name: WALLARM_CRON_SYNC_IP_LISTS_TIMEOUT
      value: "{{ .Config.Wallarm.cronJobs.syncIpLists.timeout }}"
    - name: WALLARM_CRON_SYNC_IP_LISTS_SOURCE_SCHEDULE
      value: "{{ .Config.Wallarm.cronJobs.syncIpListsSource.schedule }}"
    - name: WALLARM_CRON_SYNC_IP_LISTS_SOURCE_TIMEOUT
      value: "{{ .Config.Wallarm.cronJobs.syncIpListsSource.timeout }}"
{{- end }}

{{- define "helperContainer.resources" }}
  {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory-limit") }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory") }}
    requests:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/helper-cpu` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/helper-memory` }}"
      {{ end }}
  {{- end }}
  {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory-limit") }}
    limits:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-cpu-limit") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/helper-cpu-limit` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/helper-memory-limit") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/helper-memory-limit` }}"
      {{ end }}
    {{- end }}
  {{- else }}
    {{- if (index .Config.Container.helper "resources") }}
    {{ toYaml .Config.Container.helper.resources | indent 4 }}
    {{- end }}
  {{- end }}
{{- end }}

{{- define "initIptablesContainer.resources" }}
  {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory-limit") }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory") }}
    requests:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-iptables-cpu` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-iptables-memory` }}"
      {{ end }}
    {{- end }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory-limit") }}
    limits:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-cpu-limit") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-iptables-cpu-limit` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-iptables-memory-limit") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-iptables-memory-limit` }}"
      {{ end }}
    {{- end }}
  {{- else }}
    {{- if (index .Config.Container.init.iptables "resources") }}
    {{ toYaml .Config.Container.init.iptables.resources | indent 4 }}
    {{- end }}
  {{- end }}
{{- end }}

{{- define "initHelperContainer.resources" }}
  {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory-limit") }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory") }}
    requests:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-helper-cpu` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-helper-memory` }}"
      {{ end }}
    {{- end }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory-limit") }}
    limits:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-cpu-limit") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-helper-cpu-limit` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/init-helper-memory-limit") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/init-helper-memory-limit` }}"
      {{ end }}
    {{- end }}
  {{- else }}
    {{- if (index .Config.Container.init.helper "resources") }}
    {{ toYaml .Config.Container.init.helper.resources | indent 4 }}
    {{- end }}
  {{- end }}
{{- end }}

{{- define "proxyContainer.resources" }}
  {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory-limit") }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory") }}
    requests:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-cpu` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-memory` }}"
      {{ end }}
    {{- end }}
    {{- if or (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu-limit") (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory-limit") }}
    limits:
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-cpu-limit") -}}
      cpu: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-cpu-limit` }}"
      {{ end }}
      {{ if (isSet .ObjectMeta.Annotations "sidecar.wallarm.io/proxy-memory-limit") -}}
      memory: "{{ index .ObjectMeta.Annotations `sidecar.wallarm.io/proxy-memory-limit` }}"
      {{ end }}
    {{- end }}
  {{- else }}
    {{- if eq (getAnnotation .ObjectMeta "sidecar.wallarm.io/sidecar-deployment-scheme" .Config.Deployment.scheme) "split" }}
      {{- if (index .Config.Container.proxy.split "resources") }}
    {{ toYaml .Config.Container.proxy.split.resources | indent 4 }}
      {{- end }}
    {{- else }}
      {{- if (index .Config.Container.proxy.single "resources") }}
    {{ toYaml .Config.Container.proxy.single.resources | indent 4 }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}